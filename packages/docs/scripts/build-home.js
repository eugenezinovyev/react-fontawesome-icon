import { unified } from 'unified';
import remarkParse from 'remark-parse';
import remarkGfm from 'remark-gfm';
import remarkRehype from 'remark-rehype';
import rehypeReact from 'rehype-react';
import { createElement, Fragment } from 'react';
import { createRequire } from 'module';
import { readFile, writeFile } from 'fs/promises';
import { dirname, resolve } from 'path';
import { fileURLToPath } from 'url';

const require = createRequire(import.meta.url);
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

function createNamedFunction(name) {
    return (new Function(`return function ${name}() {}`))();
}

function getElementType(type) {
    if (typeof type === 'string') {
        return `'${type}'`;
    } else if (typeof type === 'function') {
        return type.name;
    } else if (type === Fragment) {
        return 'Fragment';
    } else {
        return type;
    }
}

function convert2react(tree) {
    if (typeof tree === 'string') {
        if (tree === '\n' || tree === '\r\n') {
            return '\'\\n\'';
        }

        return `\`${tree}\``;
    }

    const { type, key, props: { children, ...props } = {} } = tree;
    const elementProps = key ? { key, ...props } : props;

    const params = [
        getElementType(type),
        Object.keys(elementProps).length > 0 ? JSON.stringify(elementProps) : 'null',
        ...((children || []).map((child) => convert2react(child)))
    ];

    return `createElement(${params.join(', ')})`;
}

function buildReactComponentTree(content, rehypeComponents) {
    const processor = unified()
        .use(remarkParse, undefined)
        .use([remarkGfm])
        .use(remarkRehype, undefined)
        .use(rehypeReact, {
            createElement,
            Fragment,
            passNode: true,
            components: rehypeComponents,
        });

    return processor.processSync(content).result;
}

const readmeContent = await readFile(require.resolve('@react-fontawesome-svg-icon/readme')).then(buffer => String(buffer));
const reactComponentTree = buildReactComponentTree(readmeContent, {
    a: createNamedFunction('Link'),
    pre: createNamedFunction('Pre'),
    h1: createNamedFunction('Heading1'),
});
const reactCode = convert2react(reactComponentTree);
const reactComponent = `/* eslint-disable */
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
import { createElement, Fragment } from 'react';
import Link from './Link';
import Pre from './Pre';
import Heading1 from './Heading1';

const Readme = () => (
${reactCode}
);

export default Readme;
`;

await writeFile(resolve(__dirname, '../src/pages/home/Readme.jsx'), reactComponent, { encoding: 'utf8' });
